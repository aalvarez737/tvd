'use strict';

var path = require('path');
var chai = require("chai");
var assert = require('chai').assert;
chai.config.includeStack = true;

var _ = require("lodash");
var bPromise = require("bluebird");
var tvdutil = require('tvdutil');
var Mocks = require('mocks');
var Component = require('../src/component');

var testID = 'ar.edu.unlp.info.lifia.tvd.test';
var testID2 = 'ar.edu.unlp.info.lifia.tvd.test2';

var testComponent = {
	"id": testID,
	"pkgID": testID,
	"name": "Node name",
	"type": "binary",
	"version": "1.0.0",
	"main": 'bootstrap.js',
	"dependencies": [testID2],
};

var testComponent2 = {
	"id": testID2,
	"pkgID": testID2,
	"name": "Node name",
	"type": "binary",
	"version": "1.0.0",
	"main": 'bootstrap.js'
};

var testPackage = {
	"id": testID,
	"version": "1.0.0",
	"vendor": "LIFIA",
	"vendor-url": "http://lifia.info.unlp.edu.ar/",
	"api-level": "1.0",
	"platform": "all",
	"update": false,
	"components": [testComponent,testComponent2]
};

var testPackages = [ testPackage ];

describe('Component', function() {
	var reg = undefined;

	beforeEach(function() {
		reg = Mocks.init();
	});

	afterEach(function() {
		reg = null;
		Mocks.fin();
	});

	function initPkgMgr( comp, comp2 ) {
		var pkgs = _.cloneDeep(testPackages);
		pkgs[0].components = [comp];
		if (comp2) {
			pkgs[0].components.push( comp2 );
		}
		reg.put( 'pkgmgr', new Mocks.PackageManager(pkgs) );
	}

	describe('constructor', function() {
		it('should check valid component', function() {
			reg.put( 'pkgmgr', new Mocks.PackageManager(testPackages) );
			var comp = new Component(reg, testID);
			assert.isObject(comp);
		});

		it('should allow create a component without dependencies', function() {
			var comp = _.cloneDeep(testComponent);
			comp.dependencies = undefined;
			initPkgMgr(comp);
			var c = new Component(reg, testID);
			assert.isObject(c);
			assert.isArray(c.dependencies());
			assert.isTrue( c.dependencies().length === 0 );
		});

		it('should check id field', function() {
			var comp = _.cloneDeep(testComponent);
			comp.id = undefined;
			initPkgMgr(comp);
			function fn() { new Component(reg,testID); }
			assert.throw(fn, Error, 'Component not exists: id=' + testID);
		});

		it('should check name field', function() {
			var comp = _.cloneDeep(testComponent);
			comp.name = undefined;
			initPkgMgr(comp);
			function fn() { new Component(reg,testID); }
			assert.throw(fn, Error, 'Mandatory attributes missing');
		});

		it('should check type field is present', function() {
			var comp = _.cloneDeep(testComponent);
			comp.type = undefined;
			initPkgMgr(comp);
			function fn() { new Component(reg,testID); }
			assert.throw(fn, Error, 'Mandatory attributes missing: id=' + testID);
		});

		it('should check type field is valid', function() {
			var comp = _.cloneDeep(testComponent);
			comp.type = 'pepe';
			initPkgMgr(comp);
			function fn() { new Component(reg,testID); }
			assert.throw(fn, Error, 'Invalid type value: type=pepe');
		});

		it('should check type version is present', function() {
			var comp = _.cloneDeep(testComponent);
			comp.version = undefined;
			initPkgMgr(comp);
			function fn() { new Component(reg,testID); }
			assert.throw(fn, Error, 'Mandatory attributes missing: id=' + testID);
		});

		it('should check type main is present', function() {
			var comp = _.cloneDeep(testComponent);
			comp.main = undefined;
			initPkgMgr(comp);
			function fn() { new Component(reg,testID); }
			assert.throw(fn, Error, 'Mandatory attributes missing: id=' + testID);
		});

		it('should check valid dependencies', function() {
			var comp = _.cloneDeep(testComponent);
			comp.dependencies = { "algo": '1.0.0' };
			initPkgMgr(comp);
			function fn() { new Component(reg,testID); }
			assert.throw(fn, Error, 'Dependencies must be an array: id=' + testID);
		});

		it('should check dependencies are resolved', function() {
			var comp = _.cloneDeep(testComponent);
			comp.dependencies = [ 'ar.edu.unlp.info.lifia.tvd.pepe' ];
			initPkgMgr(comp);
			function fn() { new Component(reg,testID); }
			var msg = 'Dependency not resolved: id=' + testID + ', dependency=ar.edu.unlp.info.lifia.tvd.pepe';
			assert.throw(fn, Error, msg);
		});

		it('should check with invalid dependencies like pkgmgr and srvmgr', function() {
			var comp = _.cloneDeep(testComponent);
			comp.dependencies = [ 'pkgmgr' ];
			comp.dependencies = [ 'ar.edu.unlp.info.lifia.tvd.pkgmgr' ];
			initPkgMgr(comp);
			var c = new Component(reg,testID);
			assert.isObject(c);
			assert.isArray(c.dependencies());
			assert.isTrue( c.dependencies().length === 1 );
		});

		it('should get system field from component, and later from package', function() {
			var comp = _.cloneDeep(testComponent);
			comp.dependencies = undefined;
			comp.system = true;
			initPkgMgr(comp);
			var c = new Component(reg,testID);
			assert.isObject(c);
			assert.isTrue(c.info.system);
		});

		it('should get system field from package if undefined', function() {
			var comp = _.cloneDeep(testComponent);
			comp.dependencies = undefined;
			comp.system = false;
			var pkgs = _.cloneDeep(testPackages);
			pkgs[0].system = true;
			pkgs[0].components = [comp];
			reg.put( 'pkgmgr', new Mocks.PackageManager(pkgs) );

			var c = new Component(reg,testID);
			assert.isObject(c);
			assert.isFalse(c.info.system);
		});

		it('should get user in true if no field user available', function() {
			var comp = _.cloneDeep(testComponent);
			comp.dependencies = undefined;
			comp.user = undefined;
			initPkgMgr(comp);
			var c = new Component(reg,testID);
			assert.isObject(c);
			assert.isTrue(c.info.user);
		});

		it('should get user field from component if available', function() {
			var comp = _.cloneDeep(testComponent);
			comp.dependencies = undefined;
			comp.user = false;
			initPkgMgr(comp);
			var c = new Component(reg,testID);
			assert.isObject(c);
			assert.isFalse(c.info.user);
		});

		it('should get user field from package if user undefined', function() {
			var comp = _.cloneDeep(testComponent);
			comp.dependencies = undefined;
			comp.user = undefined;
			var pkgs = _.cloneDeep(testPackages);
			pkgs[0].user = false;
			pkgs[0].components = [comp];
			reg.put( 'pkgmgr', new Mocks.PackageManager(pkgs) );

			var c = new Component(reg,testID);
			assert.isObject(c);
			assert.isFalse(c.info.system);
		});

		it('should check valid local icon field', function() {
			var comp = _.cloneDeep(testComponent);
			comp.dependencies = undefined;
			comp.icon = 'pepe';
			var pkgs = _.cloneDeep(testPackages);
			pkgs[0].user = false;
			pkgs[0].components = [comp];
			reg.put( 'pkgmgr', new Mocks.PackageManager(pkgs) );

			var c = new Component(reg,testID);
			assert.isObject(c);
			assert.equal( c.info.icon, undefined );
		});

		it('should check valid http icon field', function() {
			var comp = _.cloneDeep(testComponent);
			comp.dependencies = undefined;
			comp.icon = 'http://pepe.com/pepe.png';
			var pkgs = _.cloneDeep(testPackages);
			pkgs[0].user = false;
			pkgs[0].components = [comp];
			reg.put( 'pkgmgr', new Mocks.PackageManager(pkgs) );

			var c = new Component(reg,testID);
			assert.isObject(c);
			assert.equal( c.info.icon, comp.icon );
		});
	});

	describe('resoveResources', function() {
		it('should resolve main resource', function() {
			var oldCheck = tvdutil.isFile;
			tvdutil.isFile = function() { return true; }
			var comp = _.cloneDeep(testComponent);
			comp.dependencies = undefined;
			initPkgMgr(comp);
			var c = new Component(reg, testID);
			var info = {main: 'main.js'};
			var pkgMgr = reg.get('pkgmgr');
			pkgMgr.getInstallPath = function() { return '/main.js'; };
			assert.equal( c.resolveResource( pkgMgr, info, 'main' ), 'file:///main.js' );
			tvdutil.isFile = oldCheck;
		});

		it('should resolve main resource', function() {
			var oldCheck = tvdutil.isFile;
			tvdutil.isFile = function() { return true; }
			var comp = _.cloneDeep(testComponent);
			comp.dependencies = undefined;
			initPkgMgr(comp);
			var c = new Component(reg, testID);
			var info = {main: 'file:///pepe/main.js'};
			var pkgMgr = reg.get('pkgmgr');
			pkgMgr.getInstallPath = function() { return '/main.js'; };
			assert.equal( c.resolveResource( pkgMgr, info, 'main' ), 'file:///main.js' );
			tvdutil.isFile = oldCheck;
		});

		it('should resolve remote main resource', function() {
			var comp = _.cloneDeep(testComponent);
			comp.dependencies = undefined;
			initPkgMgr(comp);
			var c = new Component(reg, testID);
			var info = {main: 'http://pepe.com/main.js'};
			var pkgMgr = reg.get('pkgmgr');
			assert.equal( c.resolveResource( pkgMgr, info, 'main' ), 'http://pepe.com/main.js' );
		});

		it('should check if exists resource', function() {
			var oldCheck = tvdutil.isFile;
			tvdutil.isFile = function() { return false; }
			var comp = _.cloneDeep(testComponent);
			comp.dependencies = undefined;
			initPkgMgr(comp);
			var c = new Component(reg, testID);
			var info = {main: 'main.js'};
			var pkgMgr = reg.get('pkgmgr');
			pkgMgr.getInstallPath = function() { return '/main.js'; };
			var fnc = function() {
				c.resolveResource( pkgMgr, info, 'main' );
			}
			assert.throw( fnc, Error, 'Property main is local file but not exists: main=/main.js' );
			tvdutil.isFile = oldCheck;
		});

		it('should check invalid protocol', function() {
			var comp = _.cloneDeep(testComponent);
			comp.dependencies = undefined;
			initPkgMgr(comp);
			var c = new Component(reg, testID);
			var info = {main: 'pepe://main.js'};
			var pkgMgr = reg.get('pkgmgr');
			pkgMgr.getInstallPath = function() { return '/main.js'; };

			var fnc = function() {
				c.resolveResource( pkgMgr, info, 'main' );
			}
			assert.throw( fnc, Error, 'Property main must be http/https/file/chrome: main=pepe://main.js' );
		});
	});

	describe('runDependencies', function() {
		it('should run dependencies ok if the component has not dependencies', function(done) {
			var comp = _.cloneDeep(testComponent);
			comp.dependencies = undefined;
			initPkgMgr(comp);
			var c = new Component(reg, testID);
			c.runDependencies().then(function() {
				done();
			});
		});

		it('should run dependecies if the component has dependencies that succesfully run', function(done) {
			initPkgMgr(_.cloneDeep(testComponent),_.cloneDeep(testComponent2));
			var srvMgr = new Mocks.ServiceManager();
			reg.put('srvmgr', srvMgr );
			var comp = new Component(reg, testID);
			comp.runDependencies().then(function() {
				assert.isTrue( srvMgr.result.runs.length === 1 );
				assert.isTrue( srvMgr.result.runs[0] === testID2 );
				done();
			});
		});

		it('should fail if the component has dependencies that fails at run', function(done) {
			initPkgMgr(_.cloneDeep(testComponent),_.cloneDeep(testComponent2));
			var srvMgr = new Mocks.ServiceManager();
			srvMgr.run = function(id ) { return bPromise.reject(new Error('pepe')); }
			reg.put('srvmgr', srvMgr );
			var c = new Component(reg, testID);
			c.runDependencies().catch(function(err) {
				assert( err !== undefined );
				assert.equal( err.message, 'pepe' );
				done();
			});
		});
	});

	describe('stopDependencies', function() {
		it('should call service manager to stop all dependencies', function(done) {
			initPkgMgr(_.cloneDeep(testComponent),_.cloneDeep(testComponent2));
			var srvMgr = new Mocks.ServiceManager();
			reg.put('srvmgr', srvMgr );
			var c = new Component(reg, testID);
			c.runDependencies().then(function(data) {
				assert( data !== undefined );
				assert.equal( data.info.id, 'ar.edu.unlp.info.lifia.tvd.test' );

				c.stopDependencies().then(function(data) {
					assert( data !== undefined );
					assert.equal( data.info.id, 'ar.edu.unlp.info.lifia.tvd.test' );

					assert.isTrue( srvMgr.result.runs.length === testComponent.dependencies.length );
					assert.isTrue( srvMgr.result.stops.length === testComponent.dependencies.length );
					done();
				});
			});
		});

		it('should call service manager to stop all dependencies and ignore non stopped services', function(done) {
			initPkgMgr(_.cloneDeep(testComponent),_.cloneDeep(testComponent2));
			var srvMgr = new Mocks.ServiceManager();
			srvMgr.stop = function(id) {
				srvMgr.result.stops.push(id);
				return bPromise.reject(new Error('Algo'));
			};
			reg.put('srvmgr', srvMgr );
			var c = new Component(reg, testID);
			c.runDependencies().then(function(data) {
				assert( data !== undefined );
				assert.equal( data.info.id, 'ar.edu.unlp.info.lifia.tvd.test' );

				c.stopDependencies().then(function(data) {
					assert( data !== undefined );
					assert.equal( data.info.id, 'ar.edu.unlp.info.lifia.tvd.test' );
					assert.isTrue( srvMgr.result.runs.length === testComponent.dependencies.length );
					assert.isTrue( srvMgr.result.stops.length === testComponent.dependencies.length );
					done();
				});
			});
		});
	});

	describe('depends', function() {
		it('should check dependencies inclusion', function() {
			var comp = _.cloneDeep(testComponent);
			comp.dependencies = ['ar.edu.unlp.info.lifia.tvd.test2'];

			initPkgMgr(comp,_.cloneDeep(testComponent2));
			var c = new Component(reg, testID);
			assert.isTrue( c.depends("ar.edu.unlp.info.lifia.tvd.test2") );
			assert.isFalse( c.depends("ar.edu.unlp.info.lifia.tvd.pepe") );
		});
	});
});
