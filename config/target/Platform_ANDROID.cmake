set(PLATFORM ANDROID)
set(PLATFORM_BINARY_TYPE "lib")

# This one is important
SET(CMAKE_SYSTEM_NAME Linux)
# This one not so much
SET(CMAKE_SYSTEM_VERSION 1)

# Specify the cross compiler

# Set Android api level to use
SET(ANDROID_API_LEVEL $ENV{ANDROID_API_LEVEL})
IF(NOT ANDROID_API_LEVEL)
	set(ANDROID_API_LEVEL 17)
	MESSAGE(STATUS "ANDROID_API_LEVEL not set, using default (${ANDROID_API_LEVEL}).")
ENDIF(NOT ANDROID_API_LEVEL)

# Set Android toolchain to use
SET(ANDROID_TOOLCHAIN $ENV{ANDROID_TOOLCHAIN})
IF(NOT ANDROID_TOOLCHAIN)
	MESSAGE(FATAL_ERROR "ANDROID_TOOLCHAIN should be android toolchain path.")
ENDIF(NOT ANDROID_TOOLCHAIN)

# Set Android toolchain type to use
SET(ANDROID_TOOLCHAIN_TYPE $ENV{ANDROID_TOOLCHAIN_TYPE})
IF(NOT ANDROID_TOOLCHAIN_TYPE)
	set(ANDROID_TOOLCHAIN_TYPE arm-linux-androideabi)
ENDIF(NOT ANDROID_TOOLCHAIN_TYPE)

set(ANDROID_TOOLCHAIN_SYSROOT $ENV{ANDROID_TOOLCHAIN_SYSROOT})
IF(NOT ANDROID_TOOLCHAIN_SYSROOT)
	set(ANDROID_TOOLCHAIN_SYSROOT "${ANDROID_TOOLCHAIN}/sysroot/")
ENDIF(NOT ANDROID_TOOLCHAIN_SYSROOT)

SET(CMAKE_C_COMPILER   ${ANDROID_TOOLCHAIN}/bin/${ANDROID_TOOLCHAIN_TYPE}-gcc )
SET(CMAKE_CXX_COMPILER ${ANDROID_TOOLCHAIN}/bin/${ANDROID_TOOLCHAIN_TYPE}-g++ )
SET(STRIP_TOOL         ${ANDROID_TOOLCHAIN}/bin/${ANDROID_TOOLCHAIN_TYPE}-strip )

# Where is the target environment
SET(PLATFORM_FIND_ROOT_PATH ${ANDROID_TOOLCHAIN_SYSROOT} )

# Search for programs in the build host directories
SET(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)

# For libraries and headers in the target directories
SET(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)
SET(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)

# Set optimization level for release build
set(CMAKE_CXX_FLAGS_DEBUG "-DANDROID -D__ANDROID__ -DSK_BUILD_FOR_ANDROID_NDK")
set(CMAKE_CXX_FLAGS_RELEASE "-Os -DANDROID -D__ANDROID__ -DSK_BUILD_FOR_ANDROID_NDK")
# Set optimization level and debug info for developer build
set(CMAKE_CXX_FLAGS_RELWITHDEBINFO "-O2 -g")
set(CMAKE_CXX_STANDARD_LIBRARIES "-z defs -lsupc++ ${ANDROID_TOOLCHAIN}/arm-linux-androideabi/lib/libstdc++.a" )

# Set build config
set(BUILD_SHARED 0)
set(CMAKE_BUILD_TYPE "Release")
set(COMPILE_TESTS 0)

# util
set(UTIL_BASE_USE_ANDROID 1)
set(LOG_USE_LOG 0)
set(LOG_USE_ANDROID 1)
set(IO_USE_EV 1)
set(STORAGE_USE_BDB 1)
set(STORAGE_USE_MEMORY 1)
set(UTF8_CONVERTER_USE_ICONV 0)
set(UTF8_CONVERTER_USE_EMBED 1)

# canvas
set(CANVAS_SYSTEM_USE_ANDROID 1)
set(CANVAS_SYSTEM_USE_GTK 0)
set(CANVAS_SYSTEM_USE_X11 0)
set(CANVAS_2D_USE_CAIRO 0)
set(CANVAS_2D_USE_SKIA 0)
set(USE_GLES2 1)
set(CANVAS_WINDOW_USE_EGL 1)
set(CANVAS_2D_USE_GL 1)
set(CANVAS_PLAYER_USE_VLC 0)
set(CANVAS_AUDIO_USE_PULSE 0)

# TODO: In android, we cannot lauch a new process. Implement alternative like IOS
set(CANVAS_WINDOW_USE_REMOTE 1)
set(CANVAS_REMOTE_USE_SHARED 0)
set(CANVAS_REMOTE_USE_LOCAL 1)

# mpegparser
set(DVB_USE_DVB 0)

# zapper
set(ZAPPER_IMPL_USE_PC 0)
set(ZAPPER_IMPL_USE_ANDROID 1)

# Ginga
set(GINGA_PACKAGE_USE_ANDROID 1)

set(ZAPPER_MPEG_PLAYER \"ts\")

