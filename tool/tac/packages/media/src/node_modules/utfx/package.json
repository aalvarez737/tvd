{
  "_args": [
    [
      {
        "raw": "utfx@~1.0.0",
        "scope": null,
        "escapedName": "utfx",
        "name": "utfx",
        "rawSpec": "~1.0.0",
        "spec": ">=1.0.0 <1.1.0",
        "type": "range"
      },
      "/home/shared/work/repos/tvd/tool/tac/packages/media/src/node_modules/srt2vtt"
    ]
  ],
  "_from": "utfx@>=1.0.0 <1.1.0",
  "_id": "utfx@1.0.1",
  "_inCache": true,
  "_location": "/utfx",
  "_npmUser": {
    "name": "dcode",
    "email": "dcode@dcode.io"
  },
  "_npmVersion": "1.4.28",
  "_phantomChildren": {},
  "_requested": {
    "raw": "utfx@~1.0.0",
    "scope": null,
    "escapedName": "utfx",
    "name": "utfx",
    "rawSpec": "~1.0.0",
    "spec": ">=1.0.0 <1.1.0",
    "type": "range"
  },
  "_requiredBy": [
    "/srt2vtt"
  ],
  "_resolved": "https://registry.npmjs.org/utfx/-/utfx-1.0.1.tgz",
  "_shasum": "d52b2fd632a99eca8d9d4a39eece014a6a2b0048",
  "_shrinkwrap": null,
  "_spec": "utfx@~1.0.0",
  "_where": "/home/shared/work/repos/tvd/tool/tac/packages/media/src/node_modules/srt2vtt",
  "author": {
    "name": "Daniel Wirtz",
    "email": "dcode@dcode.io"
  },
  "bugs": {
    "url": "https://github.com/dcodeIO/utfx/issues"
  },
  "dependencies": {},
  "description": "A compact library to encode, decode and convert UTF8 / UTF16 in JavaScript.",
  "devDependencies": {
    "closurecompiler": "~1",
    "metascript": "~0",
    "pretty-hrtime": "^1.0.0",
    "testjs": "~1",
    "utf8": "^2.1.0"
  },
  "directories": {},
  "dist": {
    "shasum": "d52b2fd632a99eca8d9d4a39eece014a6a2b0048",
    "tarball": "https://registry.npmjs.org/utfx/-/utfx-1.0.1.tgz"
  },
  "engines": {
    "node": ">=0.8"
  },
  "gitHead": "feb4e053f03194fa99fc7a5efa21df88b2c887d4",
  "homepage": "https://github.com/dcodeIO/utfx#readme",
  "keywords": [
    "charset",
    "encoding",
    "unicode",
    "utf8",
    "utf16"
  ],
  "license": "Apache-2.0",
  "main": "index.js",
  "maintainers": [
    {
      "name": "dcode",
      "email": "dcode@dcode.io"
    }
  ],
  "name": "utfx",
  "optionalDependencies": {},
  "readme": "![utfx - A compact library to encode, decode and convert UTF8 / UTF16 in JavaScript.](https://raw.github.com/dcodeIO/utfx/master/utfx.png)\r\n====\r\n**utfx** is a compact library to encode, decode and convert UTF8 / UTF16 in JavaScript using arbitrary sources and\r\ndestinations through the use of successively called functions, basically eliminating [memory overhead](https://github.com/dcodeIO/utfx/wiki#faq).\r\n\r\nThe standalone library is also capable of using binary strings and arrays (with the usual overhead) and provides\r\npolyfills for `String.fromCodePoint` and `String#codePointAt`.\r\n\r\nAPI\r\n---\r\n\r\n### encodeUTF8(src, dst)\r\n\r\nEncodes UTF8 code points to UTF8 bytes.\r\n\r\n| Parameter       | Type            | Description\r\n|-----------------|-----------------|---------------\r\n| src             | *function():(number &#124; null) &#124; number* | Code points source, either as a function returning the next code point respectively `null` if there are no more code points left or a single numeric code point. \r\n| dst             | *function(number)* | Bytes destination as a function successively called with the next byte \r\n\r\n### decodeUTF8(src, dst)\r\n\r\nDecodes UTF8 bytes to UTF8 code points.\r\n\r\n| Parameter       | Type            | Description\r\n|-----------------|-----------------|---------------\r\n| src             | *function():(number &#124; null)* | Bytes source as a function returning the next byte respectively `null` if there are no more bytes left. \r\n| dst             | *function(number)* | Code points destination as a function successively called with each decoded code point. \r\n| **@throws**     | *RangeError*    | If a starting byte is invalid in UTF8 \r\n| **@throws**     | *Error*         | If the last sequence is truncated. Has an array property `bytes` holding the remaining bytes. \r\n\r\n### UTF16toUTF8(src, dst)\r\n\r\nConverts UTF16 characters to UTF8 code points.\r\n\r\n| Parameter       | Type            | Description\r\n|-----------------|-----------------|---------------\r\n| src             | *function():(number &#124; null)* | Characters source as a function returning the next char code respectively `null` if there are no more characters left. \r\n| dst             | *function(number)* | Code points destination as a function successively called with each converted code point. \r\n\r\n### UTF8toUTF16(src, dst)\r\n\r\nConverts UTF8 code points to UTF16 characters.\r\n\r\n| Parameter       | Type            | Description\r\n|-----------------|-----------------|---------------\r\n| src             | *function():(number &#124; null) &#124; number* | Code points source, either as a function returning the next code point respectively `null` if there are no more code points left or a single numeric code point. \r\n| dst             | *function(number)* | Characters destination as a function successively called with each converted char code. \r\n| **@throws**     | *RangeError*    | If a code point is out of range \r\n\r\n### encodeUTF16toUTF8(src, dst)\r\n\r\nConverts and encodes UTF16 characters to UTF8 bytes.\r\n\r\n| Parameter       | Type            | Description\r\n|-----------------|-----------------|---------------\r\n| src             | *function():(number &#124; null)* | Characters source as a function returning the next char code respectively `null` if there are no more characters left. \r\n| dst             | *function(number)* | Bytes destination as a function successively called with the next byte. \r\n\r\n### decodeUTF8toUTF16(src, dst)\r\n\r\nDecodes and converts UTF8 bytes to UTF16 characters.\r\n\r\n| Parameter       | Type            | Description\r\n|-----------------|-----------------|---------------\r\n| src             | *function():(number &#124; null)* | Bytes source as a function returning the next byte respectively `null` if there are no more bytes left. \r\n| dst             | *function(number)* | Characters destination as a function successively called with each converted char code. \r\n| **@throws**     | *RangeError*    | If a starting byte is invalid in UTF8 \r\n| **@throws**     | *Error*         | If the last sequence is truncated. Has an array property `bytes` holding the remaining bytes. \r\n\r\n### assertByte(b)\r\n\r\nAsserts a byte value.\r\n\r\n| Parameter       | Type            | Description\r\n|-----------------|-----------------|---------------\r\n| b               | *number*        | 8bit byte value \r\n| **@returns**    | *number*        | Valid byte value \r\n| **@throws**     | *TypeError*     | If the byte value is invalid \r\n| **@throws**     | *RangeError*    | If the byte value is out of range \r\n\r\n### assertCharCode(c)\r\n\r\nAsserts an UTF16 char code.\r\n\r\n| Parameter       | Type            | Description\r\n|-----------------|-----------------|---------------\r\n| c               | *number*        | UTF16 char code \r\n| **@returns**    | *number*        | Valid char code \r\n| **@throws**     | *TypeError*     | If the char code is invalid \r\n| **@throws**     | *RangeError*    | If the char code is out of range \r\n\r\n### assertCodePoint(cp)\r\n\r\nAsserts an UTF8 code point.\r\n\r\n| Parameter       | Type            | Description\r\n|-----------------|-----------------|---------------\r\n| cp              | *number*        | UTF8 code point \r\n| **@returns**    | *number*        | Valid code point \r\n| **@throws**     | *TypeError*     | If the code point is invalid \r\n| **@throws**     | *RangeError*    | If the code point is out of range \r\n\r\n### calculateCodePoint(cp)\r\n\r\nCalculates the byte length of an UTF8 code point.\r\n\r\n| Parameter       | Type            | Description\r\n|-----------------|-----------------|---------------\r\n| cp              | *number*        | UTF8 code point \r\n| **@returns**    | *number*        | Byte length \r\n\r\n### calculateUTF8(src)\r\n\r\nCalculates the number of UTF8 bytes required to store UTF8 code points.\r\n\r\n| Parameter       | Type            | Description\r\n|-----------------|-----------------|---------------\r\n| src             | *function():(number &#124; null)* | Code points source as a function returning the next code point respectively `null` if there are no more code points left. \r\n| **@returns**    | *number*        | The number of UTF8 bytes required \r\n\r\n### calculateUTF16asUTF8(src)\r\n\r\nCalculates the number of UTF8 code points respectively UTF8 bytes required to store UTF16 char codes.\r\n\r\n| Parameter       | Type            | Description\r\n|-----------------|-----------------|---------------\r\n| src             | *function():(number &#124; null)* | Characters source as a function returning the next char code respectively `null` if there are no more characters left. \r\n| **@returns**    | *!Array.&lt;number&gt;* | The number of UTF8 code points at index 0 and the number of UTF8 bytes required at index 1. \r\n\r\n### arraySource(a)\r\n\r\nCreates a source function for an array.\r\n\r\n| Parameter       | Type            | Description\r\n|-----------------|-----------------|---------------\r\n| a               | *!Array.&lt;number&gt;* | Array to read from \r\n| **@returns**    | *function():(number &#124; null)* | Source function returning the next value respectively `null` if there are no more values left. \r\n| **@throws**     | *TypeError*     | If the argument is invalid \r\n\r\n### arrayDestination(a)\r\n\r\nCreates a destination function for an array.\r\n\r\n| Parameter       | Type            | Description\r\n|-----------------|-----------------|---------------\r\n| a               | *!Array.&lt;number&gt;* | Array to write to \r\n| **@returns**    | *function(number)* | Destination function successively called with the next value. \r\n| **@throws**     | *TypeError*     | If the argument is invalid \r\n\r\n### stringSource(s)\r\n\r\nCreates a source function for a string.\r\n\r\n| Parameter       | Type            | Description\r\n|-----------------|-----------------|---------------\r\n| s               | *string*        | String to read from \r\n| **@returns**    | *function():(number &#124; null)* | Source function returning the next char code respectively `null` if there are no more characters left. \r\n| **@throws**     | *TypeError*     | If the argument is invalid \r\n\r\n### stringDestination()\r\n\r\nCreates a destination function for a string.\r\n\r\n| Parameter       | Type            | Description\r\n|-----------------|-----------------|---------------\r\n| **@returns**    | *function(number=):(undefined &#124; string)* | Destination function successively called with the next char code. Returns the final string when called without arguments. \r\n\r\n### fromCodePoint(var_args)\r\n\r\nA polyfill for `String.fromCodePoint`.\r\n\r\n| Parameter       | Type            | Description\r\n|-----------------|-----------------|---------------\r\n| var_args        | *...number*     | Code points \r\n| **@returns**    | *string*        | JavaScript string \r\n| **@throws**     | *TypeError*     | If arguments are invalid or a code point is invalid \r\n| **@throws**     | *RangeError*    | If a code point is out of range \r\n\r\n### codePointAt(s, i)\r\n\r\nA polyfill for `String#codePointAt`.\r\n\r\n| Parameter       | Type            | Description\r\n|-----------------|-----------------|---------------\r\n| s               | *string*        | JavaScript string \r\n| i               | *number*        | Index \r\n| **@returns**    | *number &#124; undefined* | Code point or `undefined` if `i` is out of range \r\n| **@throws**     | *TypeError*     | If arguments are invalid \r\n\r\n### polyfill(override=)\r\n\r\nInstalls utfx as a polyfill for `String.fromCodePoint` and `String#codePointAt` if not implemented.\r\n\r\n| Parameter       | Type            | Description\r\n|-----------------|-----------------|---------------\r\n| override        | *boolean*       | Overrides an existing implementation if `true`, defaults to `false` \r\n| **@returns**    | *!Object.&lt;string,*&gt;* | utfx namespace \r\n\r\nUsage\r\n-----\r\n* **node.js**: `npm install utfx`   \r\n   \r\n   ```js\r\n   var utfx = require(\"utfx\");\r\n   ...\r\n   ```\r\n\r\n* **Browser**: `<script src=\"/path/to/utfx.min.js\"></script>`   \r\n   \r\n   ```js\r\n   var utfx = dcodeIO.utfx;\r\n   ...\r\n   ```\r\n   \r\n* **Require.js/AMD**   \r\n   \r\n   ```js\r\n   require.config({\r\n       \"paths\": {\r\n           \"utfx\": \"/path/to/utfx.min.js\"\r\n       }\r\n   });\r\n   require([\"utfx\"], function(utfx) {\r\n       ...\r\n   }\r\n   ```\r\n\r\nDownloads\r\n---------\r\n* [Distributions](https://github.com/dcodeIO/utfx/tree/master/dist)\r\n\r\nFAQ and examples\r\n----------------\r\n* [Wiki](https://github.com/dcodeIO/utfx/wiki)\r\n\r\nLicense\r\n-------\r\nApache License, Version 2.0\r\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/dcodeIO/utfx.git"
  },
  "scripts": {
    "build": "node node_modules/metascript/bin/metascript src/wrap_standalone.js > dist/utfx.js && node node_modules/metascript/bin/metascript src/wrap_embeddable.js > dist/utfx-embeddable.js",
    "compile": "node node_modules/closurecompiler/bin/ccjs dist/utfx.js --compilation_level=ADVANCED_OPTIMIZATIONS > dist/utfx.min.js",
    "make": "npm run-script build && npm run-script compile && npm test",
    "test": "node tests/suite.js"
  },
  "version": "1.0.1"
}
