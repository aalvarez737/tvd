'use strict';

var util = require('util');

function appendString(value, xml) {
	if (value.length === 0) {
		xml.ele('string');
	}
	else {
		xml.ele('string').txt(value);
	}
}

function appendNumber(value, xml) {
	if ((value % 1) === 0) {
		xml.ele('int').txt(value);
	}
	else {
		xml.ele('double').txt(value);
	}
}

function appendBuffer(value, xml) {
	xml.ele('base64').txt(value.toString('base64'));
}

function getNextItemsFrame(frame) {
	var nextFrame = null;

	if (frame.keys) {
		if (frame.index < frame.keys.length) {
			var key = frame.keys[frame.index++];
			var member = frame.xml.ele('member').ele('name').text(key).up();
			nextFrame = {
				value: frame.value[key],
				xml: member
			};
		}
	}
	else if (frame.index < frame.value.length) {
		nextFrame = {
			value: frame.value[frame.index],
			xml: frame.xml
		};
		frame.index++;
	}

	return nextFrame;
}

function nextItem( stack, current ) {
	var next = getNextItemsFrame(current);
	if (next) {
		stack.push(next);
	}
	else {
		stack.pop();
	}
}

function Serialize(value, xml) {
	var stack = [ { value: value, xml: xml } ];

	while (stack.length > 0) {
		var current = stack[stack.length - 1];

		if (current.index !== undefined) {
			// Iterating a compound
			nextItem(stack,current);
		}
		else {
			// we're about to add a new value (compound or simple)
			var valueNode = current.xml.ele('value');
			switch(typeof current.value) {
			case 'boolean':
				xml.ele('boolean').txt(value ? 1 : 0);
				stack.pop();
				break;
			case 'string':
				appendString(current.value, valueNode);
				stack.pop();
				break;
			case 'number':
				appendNumber(current.value, valueNode);
				stack.pop();
				break;
			case 'object':
				if (current.value === null) {
					valueNode.ele('nil');
					stack.pop();
				}
				else if (current.value instanceof Date) {
					throw new Error('Cannot parse Date arguments');
				}
				else if (Buffer.isBuffer(current.value)) {
					appendBuffer(current.value, valueNode);
					stack.pop();
				}
				else {
					if (Array.isArray(current.value)) {
						current.xml = valueNode.ele('array').ele('data');
					}
					else {
						current.xml = valueNode.ele('struct');
						current.keys = Object.keys(current.value);
					}
					current.index = 0;
					nextItem(stack,current);
				}
				break;
			default:
				throw new Error(util.format('Invalid type of argument: %s', (typeof current.value)));
			}
		}
	}
}

module.exports = Serialize;

