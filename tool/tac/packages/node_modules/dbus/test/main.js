'use strict';

var _ = require('lodash');
var mockfs = require('mock-fs');
var tvdutil = require('tvdutil');
var chai = require('chai');
chai.config.includeStack = true;
var assert = chai.assert;
var Mocks = require('mocks');
var EventEmitter = require('events').EventEmitter;
var dbus_native = require('dbus-native');

describe('dbus', function() {
	var reg = null;
	var adapter = null;
	var bus = null;

	beforeEach(function() {
		reg = Mocks.init('silly');
		adapter = new Mocks.ServiceAdapter(reg);
		bus = Mocks.mockRequire( require, '../src/main', {'dbus_native': dbus_native})();
	});

	afterEach(function() {
		bus = null;
		Mocks.fin();
		adapter = null;
	});

	describe('constructor', function() {
		it('should construct basic dbus', function() {
			assert(bus);
		});
	});

	describe('init/fin', function() {
		it('should init dbus', function(done) {
			bus.init(done);
		});

		it('should check bus from bus', function(done) {
			bus.init(function(err) {
				assert.equal( err, undefined );
				assert.isFunction(bus.get);
				assert.isFunction(bus.getAll);
				assert.isFunction(bus.invoke);
				assert.isFunction(bus.getInterface);
				done();
			});
		});

		it('should init/fin/init', function(done) {
			bus.init(function(err) {
				assert.equal( err, undefined );
				bus.fin(function() {
					bus.init(function(err) {
						assert.equal( err, undefined );
						done();
					});
				});
			});
		});

		it('should catch bus error on init', function(done) {
			var events = null;

			function SystemBus() {
				var self = {};
				self.connection = {
					end: function() {}
				};
				events = new EventEmitter();
				tvdutil.forwardEventEmitter(self.connection, events);
				return self;
			}

			var old = dbus_native.systemBus;
			dbus_native.systemBus = function() {
				return new SystemBus();
			}

			bus.init(function(err) {
				dbus_native.systemBus = old;
				done();
			});

			assert(events);
			events.emit( 'error', new Error('pepe') );
		});

		it('should catch bus error after init', function(done) {
			var events = null;

			function SystemBus() {
				var self = {};
				self.connection = {
					end: function() {}
				};
				events = new EventEmitter();
				tvdutil.forwardEventEmitter(self.connection, events);
				return self;
			}

			var old = dbus_native.systemBus;
			dbus_native.systemBus = function() {
				return new SystemBus();
			}

			bus.init(function(err) {
				assert(events);
				events.emit( 'error', new Error('pepe') );

				bus.fin(function() {
					dbus_native.systemBus = old;
					done();
				});
			});

			assert(events);
			events.emit( 'connect' );
		});
	});

	describe('api', function() {
		beforeEach(function(done) {
			bus.init(done);
		});

		afterEach(function(done) {
			bus.fin(done);
		});

		describe('invoke', function() {
			// function bus.invoke( srv, path, iface, func, paramFormat );

			it('should invoke ok', function(done) {
				bus.invoke(
					'org.freedesktop.UDisks',
					'/org/freedesktop/UDisks',
					'org.freedesktop.UDisks',
					'EnumerateDevices' )
					.then(function(aDevices) {
						assert.isTrue( aDevices.length > 0 );
						done();
					});
			});

			it('should fail invoke', function(done) {
				bus.invoke(
					'org.freedesktop.UDisks',
					'/org/freedesktop/UDisks',
					'org.freedesktop.UDisks',
					'pepe' )
					.then(function(aDevices) {
						assert(false);
					},function(err) {
						assert.isTrue( err !== undefined );
						done();
					});
			});
		});

		describe('getInterface', function() {
			// function watch( srv, path, iface, member, cb );
			it( 'should get udisk interface', function(done) {
				bus.fin(function() {
					var events = new EventEmitter();

					function SystemBus() {
						var self = {};
						self.connection = {
							end: function() {}
						};
						tvdutil.forwardEventEmitter(self.connection, events);

						self.getService = function() {
							return {
								getInterface: function(p,i,cb) {
									cb(undefined,events);
								}
							};
						};

						return self;
					}

					var old = dbus_native.systemBus;
					dbus_native.systemBus = function() {
						return new SystemBus();
					}

					bus.init(function() {
						bus.getInterface(
							'org.freedesktop.UDisks',
							'/org/freedesktop/UDisks',
							'org.freedesktop.UDisks',
							function(err,udiskIface) {
								assert( err === undefined );
								assert.isObject( udiskIface );
								dbus_native.systemBus = old
								done();
							}
						);
					});

					events.emit( 'connect' );
				});
			});

			it( 'should fail add a watcher', function(done) {
				bus.getInterface(
					'org.freedesktop.pepe',
					'/org/freedesktop/UDisks',
					'org.freedesktop.pepe',
					function(err,info) {
						assert( err !== undefined );
						done();
					}
				);
			});
		});

		describe('get', function() {
			var dev = null;

			function getFirstDevice(cb) {
				bus.invoke(
					'org.freedesktop.UDisks',
					'/org/freedesktop/UDisks',
					'org.freedesktop.UDisks',
					'EnumerateDevices' )
					.then(function(aDevices) {
						assert.isTrue( aDevices.length > 0 );
						dev = aDevices[0];
						cb();
					},cb);
			}

			beforeEach(function(done) {
				getFirstDevice(done);
			});

			it('should return all properties from device', function(done) {
				//	getAll( srv, path, iface )
				bus.getAll(
					'org.freedesktop.UDisks',
					dev,
					'org.freedesktop.UDisks.Device'
				).then(function(oInfo) {
					assert.isTrue( Object.keys(oInfo).length > 0 );
					assert.isTrue( oInfo.DeviceFile.indexOf('/dev/') >= 0 );
					done();
				});
			});

			it('should return property DeviceFile from device', function(done) {
				//	getAll( srv, path, iface )
				bus.get(
					'org.freedesktop.UDisks',
					dev,
					'org.freedesktop.UDisks.Device',
					'DeviceFile'
				).then(function(deviceFile) {
					assert.isTrue( deviceFile.indexOf('/dev/') >= 0 );
					done();
				});
			});
		});
	});
});
