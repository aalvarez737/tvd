from config import config
import impl
import build_factories.buildroot
import build_factories.depot_build
import build_factories.htmlshell
import build_factories.generic_shell
import build_factories.reconfig
import build_factories.tac
import build_factories.tac_remote
import util
import slaves
import mail
import os
import yaml

import buildbot.status.html
from buildbot.config                    import BuilderConfig
from buildbot.schedulers.forcesched     import BooleanParameter, ChoiceStringParameter, FixedParameter

from twisted.python import log

import re

CURRENT_DIR=os.path.dirname(os.path.abspath(__file__))

#   Configuration initialization
c = BuildmasterConfig = {}
c['status'] = []
c['builders'] = []
c['schedulers'] = []
c['slaves'] = []

#   Web configuration
c['status'].append(buildbot.status.html.WebStatus(http_port = config["general"]["http_port"], allowForce = True))

c['projectURL' ] = "http://tvd-git.dmz.tecnologia.lifia.info.unlp.edu.ar:8009/"
c['buildbotURL'] = "http://tvd-git.dmz.tecnologia.lifia.info.unlp.edu.ar:8009/"

c['projectName'] = "Denethor [Lifia-TVD-Buildbot]"

# Data Lifetime
c['buildHorizon'] = 50
c['logHorizon'] = 50

#   Slaves configuration
c['slavePortnum'] = config["general"]["slave_port"]
build_lock = slaves.configure(c)

# Create available builders factories map
builders_factories = {
	"buildroot": build_factories.buildroot,
	"depot_build": build_factories.depot_build,
	"generic_shell": build_factories.generic_shell,
	"htmlshell": build_factories.htmlshell,
	"tac": build_factories.tac
}

# Create available schedulers map
schedulers = {
	"force_schedule": impl.force_schedule,
	"nightly_schedule": impl.nightly_schedule,
}

scheduler_properties = {
	"BooleanParameter": BooleanParameter,
	"ChoiceStringParameter": ChoiceStringParameter,
	"DownloadedJSONParameter": impl.DownloadedJSONParameter,
	"FixedParameter": FixedParameter,
	"EmptyStringParameter": util.EmptyStringParameter
}

# Read builders from builder.json
builders_filename=os.path.join(CURRENT_DIR, 'builders.json')
builders = []
with open(builders_filename) as data_file:
	builders = yaml.load(data_file)

for builder_key,builder_config in builders.items():
	factory = builder_config["factory"]["type"]
	builder = BuilderConfig(
		name = builder_config["name"],
		tags = builder_config["tags"],
		factory = builders_factories[factory].make_factory(builder_config["factory"]),
		slavename = builder_config["factory"]["slave"],
		locks = [build_lock.access('counting')]
	)

	for scheduler in builder_config["schedulers"]:
		properties = []
		for prop in scheduler["properties"]:
			properties.append(scheduler_properties[prop["class"]](**prop["parameters"]))

		c['schedulers'].extend(
			schedulers[scheduler["type"]](
				builder_config["name"],
				[builder],
				branch=scheduler.get("branch", impl.get_default_branch()),
				hide_branch=scheduler.get("hide_branch", False),
				properties=properties,
				name=scheduler["name"],
				dayOfWeek=scheduler.get("dayOfWeek", "*"),
				username=impl.emptyParameter('username'),
				reason=impl.emptyParameter('reason'),
				revision=impl.emptyParameter('revision'),
				repository=impl.emptyParameter('repository'),
				project=impl.emptyParameter('project')
			)
		)
	c['builders'].append(builder)

#   Configure mail notifications
mail.configure(c)

def prioritize_builders(buildmaster, builders):
	regex = re.compile("STATIC_RELEASE")
	builders.sort(key=lambda b: 0 if regex.search(b.name) else 1)
	return builders

c['prioritizeBuilders'] = prioritize_builders
