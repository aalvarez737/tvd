'use strict';

var fs = require('fs');
var path = require('path');

var chai = require('chai');
chai.config.includeStack = true;
var assert = chai.assert;
var Mocks = require('mocks');

var twoFeeds = fs.readFileSync(path.resolve(__dirname, 'fixture', 'feed.xml'));
var emptyFeeds = fs.readFileSync(path.resolve(__dirname, 'fixture', 'empty.xml'));

var setupRequest = null;
function RequestGetMock(uri) {
	var self = { onPipe: null };
	var _events = {};
	var _stream = null;
	var _onStream = null;

	self.on = function(evt,cb) {
		_events[evt] = cb;
		return self;
	};
	self.pipe = function(stream) {
		_stream = stream;
		if (self.onPipe) {
			self.onPipe(stream);
		}
		return self;
	};

	self.emitResponse = function( st, ct ) {
		assert(_stream);
		_events['response']( {
			statusCode: st,
			headers: { 'content-type': ct }
		});
		_stream.end();
	};

	if (setupRequest) {
		setupRequest(self);
	}

	return self;
}

var RequestMock = {
	get: RequestGetMock
};

describe('Feed', function() {
	var reg = null;
	var processFeed = null;
	var defaultCT = 'application/rss+xml';

	beforeEach(function() {
		reg = Mocks.init('silly');

		setupRequest = null;
		processFeed = Mocks.mockRequire( require, '../src/main', { 'request': RequestMock } );
		assert(processFeed);
	});

	afterEach(function() {
		Mocks.fin();
		reg = null;
		processFeed = null;
	});

	describe('basic', function() {
		it('should process a empty feed', function(done) {
			let curReq;
			setupRequest = function(req) {
				curReq = req;
			};
			
			processFeed( {url:'http://pepe.com'} )
				.then(function (res) {
					assert(res);
					assert.equal( res.items.length, 0 );
					done();
				});

			assert(curReq);	
			curReq.emitResponse( 200, defaultCT );
		});

		it('should process a valid feed but without items', function(done) {
			let curReq;
			setupRequest = function(req) {
				req.onPipe = function(str) {
					str.write( emptyFeeds );
				};
				curReq = req;
			};
			
			processFeed( {url:'http://pepe.com'} )
				.then(function (res) {
					assert(res);
					assert.equal( res.items.length, 0 );
					done();
				});

			assert(curReq);	
			curReq.emitResponse( 200, defaultCT );
		});		

		describe( 'pubDate', function() {
			function createFeed( lastPub, items ) {
				let xml = '<?xml version="1.0"?><rss version="2.0"><channel>'
				xml += '<title>Pepe1</title>';
				xml += '<link>http://pepe.com</link>';
				xml += '<description>Pepe feeed.</description>';

				xml += '<pubDate>' + new Date(lastPub).toUTCString() + '</pubDate>';

				items.forEach(function(item) {
					xml += '<item>';
					xml += '<title>' + item.title + '</title>';
					xml += '<pubDate>' + new Date(item.pubDate).toUTCString() + '</pubDate>'
					xml += '</item>';
				});

				xml += '</rss>';
				return xml;
			}

			function addItem( title, pubDate ) {
				return {
					title: title,
					pubDate: pubDate
				};
			}

			it('should process without pubDate', function(done) {
				let date1 = Date.parse('Thu, 18 Jan 2016 00:00:00 GMT');
				let date2 = Date.parse('Fri, 19 Jan 2016 00:00:00 GMT');
				let items = [ addItem('pepe2',date2), addItem('pepe1', date1) ];
				let feed = createFeed( date2, items );

				let curReq;
				setupRequest = function(req) {
					req.onPipe = function(stream) {
						stream.write( feed );
					};
					curReq = req;
				};

				processFeed({
					url:'http://pepe.com',
				})
				.then(function (res) {
					assert(res);
					assert.equal( res.items.length, 2 );
					assert.equal( res.lastPubDate, date2 );
					done();
				});

				assert(curReq);	
				curReq.emitResponse( 200, defaultCT );
			});
			
			it('should process two items with pubDate', function(done) {
				let date1 = Date.parse('Thu, 18 Jan 2016 00:00:00 GMT');
				let date2 = Date.parse('Fri, 19 Jan 2016 00:00:00 GMT');
				let items = [ addItem('pepe2',date2), addItem('pepe1', date1) ];
				let feed = createFeed( date2, items );

				let curReq;
				setupRequest = function(req) {
					req.onPipe = function(stream) {
						stream.write( feed );
					};
					curReq = req;
				};

				processFeed({
					url:'http://pepe.com',
 					lastPubDate: date1
				})
				.then(function (res) {
					assert(res);
					assert.equal( res.items.length, 1 );
					assert.equal( res.items[0].title, 'pepe2' );
					assert.equal( res.lastPubDate, date2 );
					done();
				});

				assert(curReq);	
				curReq.emitResponse( 200, defaultCT );
			});

			it('should process two items with pubDate (all processed)', function(done) {
				let date1 = Date.parse('Thu, 18 Jan 2016 00:00:00 GMT');
				let date2 = Date.parse('Fri, 19 Jan 2016 00:00:00 GMT');
				let items = [ addItem('pepe2',date2), addItem('pepe1', date1) ];
				let feed = createFeed( date2, items );

				let curReq;
				setupRequest = function(req) {
					req.onPipe = function(stream) {
						stream.write( feed );
					};
					curReq = req;
				};

				processFeed({
					url:'http://pepe.com',
 					lastPubDate: date2
				})
				.then(function (res) {
					assert(res);
					assert.equal( res.items.length, 0 );
					assert.equal( res.lastPubDate, date2 );
					done();
				});

				assert(curReq);	
				curReq.emitResponse( 200, defaultCT );
			});			
		});

		it('should handle error on stream error', function(done) {
			let curReq;
			setupRequest = function(req) {
				req.onPipe = function(stream) {
					stream.emit( 'error', new Error('pepe') );
				};
				curReq = req;
			};
			
			processFeed( {url:'http://pepe.com'} )
				.catch(function (err) {
					assert(err);
					assert(err.message,'pepe');
					done();
				});

			assert(curReq);	
			curReq.emitResponse( 200, defaultCT );
		});		

		it('should handle error on st code', function(done) {
			let curReq;
			setupRequest = function(req) {
				curReq = req;
			};
			
			processFeed( {url:'http://pepe.com'} )
				.catch(function (err) {
					assert(err);
					assert(err.message,'Cannot download file; invalid status code: st=201');
					done();
				});

			assert(curReq);	
			curReq.emitResponse( 201, defaultCT );
		});				
	});
});

