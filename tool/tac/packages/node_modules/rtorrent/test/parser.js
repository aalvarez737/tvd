'use strict';

var _ = require('lodash');
var os = require('os');
var tvdutil = require('tvdutil');
var path = require('path');
var fs = require('fs');
var chai = require('chai');
chai.config.includeStack = true;
var bPromise = require('bluebird');
var mktemp = bPromise.promisifyAll( require('mktemp') );
var assert = chai.assert;
var Mocks = require('mocks');
var Readable = require('stream').Readable

var Parser = require('../src/parser');

describe('rtorrent_parser', function() {
	var reg = null;

	beforeEach(function() {
		reg = Mocks.init('silly');
	});

	afterEach(function() {
		Mocks.fin();
		reg = null;
	});

	describe( 'constructor', function() {
		it( 'basic', function() {
			var parser = new Parser();
			assert(parser);
			assert(parser.deserialize);
		});
	});

	describe( 'deserialize', function() {
		var stream = null;
		var parser = null;

		beforeEach(function() {
			stream = new Readable();
			parser = new Parser();
		});

		afterEach(function() {
			parser = null;
			stream = null;
		});

		function doTest( xml, cb ) {
			parser.deserialize( stream, cb );
			stream.push(xml);
			stream.push(null);
		}

		function makeXmlParam(param) {
			return '<?xml version="1.0"?><methodResponse><params><param><value>' + param + '</value></param></params></methodResponse>';
		}

		it( 'parse methodResponse', function(done) {
			var strParam = '<string>South Dakota</string>';
			doTest( makeXmlParam(strParam), function(err,data) {
				assert.equal( err );
				assert.equal( data, 'South Dakota' );
				done();
			});
		});

		it( 'parse methodCall', function(done) {
			var xml = '<?xml version="1.0"?><methodCall><methodName>examples.getStateName</methodName><params><param><value><i4>40</i4></value></param></params></methodCall>';
			doTest( xml, function(err,data) {
				assert( err );
				assert.equal( err.message, "Unknown XML-RPC tag 'METHODNAME'" );
				done();
			});
		});

		describe( 'parse fault', function() {
			function makeFault(code,msg) {
				var xml = '<?xml version="1.0"?><methodResponse><fault><value><struct>';
				if (code) {
					xml += '<member><name>faultCode</name><value><int>' + code + '</int></value></member>';
				}
				if (msg) {
					xml += '<member><name>faultString</name><value><string>' + msg + '</string></value></member>';
				}
				xml += '</struct></value></fault></methodResponse>';
				return xml;
			}

			it( 'complete', function(done) {
				doTest( makeFault('4','Too many parameters.'), function(err,data) {
					assert( err );
					assert.equal( err.message, "XML-RPC fault: Too many parameters." );
					assert.equal( err.code, 4 );
					done();
				});
			});

			it( 'parse fault without fault string', function(done) {
				doTest( makeFault('4'), function(err,data) {
					assert( err );
					assert.equal( err.message, "XML-RPC fault" );
					assert.equal( err.code, 4 );
					done();
				});
			});

			it( 'parse fault without fault code', function(done) {
				doTest( makeFault(undefined,'Too many parameters'), function(err,data) {
					assert( err );
					assert.equal( err.message, "XML-RPC fault: Too many parameters" );
					assert.equal( err.code, undefined );
					done();
				});
			});
		});

		describe('parse boolean', function() {
			function makeXml( text ) {
				return makeXmlParam('<boolean>' + text + '</boolean>');
			}

			it( 'true', function(done) {
				doTest( makeXml('1'), function(err,data) {
					assert.equal( err );
					assert.equal( data, true );
					done();
				});
			});

			it( 'false', function(done) {
				doTest( makeXml('0'), function(err,data) {
					assert.equal( err );
					assert.equal( data, false );
					done();
				});
			});

			it( 'unknown', function(done) {
				doTest( makeXml('a'), function(err,data) {
					assert( err );
					assert.equal( err.message, "Illegal boolean value 'a'" );
					done();
				});
			});
		});

		describe('parse integers', function() {
			function makeXml( text ) {
				return makeXmlParam('<int>' + text + '</int>');
			}

			it( '10', function(done) {
				doTest( makeXml('10'), function(err,data) {
					assert.equal( err );
					assert.equal( data, 10 );
					done();
				});
			});

			it( 'nan', function(done) {
				doTest( makeXml('a'), function(err,data) {
					assert( err );
					assert.equal( err.message, "Expected an integer value but got 'a'" );
					done();
				});
			});
		});

		describe('parse integers (i8)', function() {
			function makeXml( text ) {
				return makeXmlParam('<i8>' + text + '</i8>');
			}

			it( '1457711227250544', function(done) {
				doTest( makeXml('1457711227250544'), function(err,data) {
					assert.equal( err );
					assert.equal( data, 1457711227250544 );
					done();
				});
			});

			it( 'nan', function(done) {
				doTest( makeXml('a'), function(err,data) {
					assert( err );
					assert.equal( err.message, "Expected an integer (I8) value but got 'a'" );
					done();
				});
			});
		});

		describe('parse doubles', function() {
			function makeXml( text ) {
				return makeXmlParam('<double>' + text + '</double>');
			}

			it( '23.4', function(done) {
				doTest( makeXml('23.4'), function(err,data) {
					assert.equal( err );
					assert.equal( data, 23.4 );
					done();
				});
			});

			it( 'nan', function(done) {
				doTest( makeXml('a'), function(err,data) {
					assert( err );
					assert.equal( err.message, "Expected a double value but got 'a'" );
					done();
				});
			});
		});

		describe('parse base64', function() {
			function makeXml( text ) {
				return makeXmlParam('<base64>' + text + '</base64>');
			}

			it( 'basic', function(done) {
				var val = 'eW91IGNhbid0IHJlYWQgdGhpcyE=';
				doTest( makeXml(val), function(err,data) {
					assert.equal( err );
					assert.equal( data.toString(), new Buffer(val,'base64').toString() );
					done();
				});
			});
		});

		describe('parse nil', function() {
			function makeXml() {
				return makeXmlParam( '<nil></nil>' );
			}

			it( 'basic', function(done) {
				doTest( makeXml(), function(err,data) {
					assert.equal( err );
					assert.equal( data, null );
					done();
				});
			});
		});

		// describe('parse datetime', function() {
		// 	function makeXml( text ) {
		// 		return makeXmlParam('<dateTime.iso8601>' + text + '</dateTime.iso8601>');
		// 	}

		// 	it.only( 'basic', function(done) {
		// 		var val = '19980717T14:08:55';
		// 		doTest( makeXml(val), function(err,data) {
		// 			console.log( data );
		// 			assert.equal( err );
		// 			assert.equal( data, NaN );
		// 			done();
		// 		});
		// 	});
		// });

		// describe('parse cdata', function() {
		// 	function makeXml( text ) {
		// 		return makeXmlParam();
		// 	}

		// 	it.only( 'basic', function(done) {
		// 		var val = '<?xml version="1.0"?><![CDATA[]]><methodResponse><params><param><value><int>10</int></value></param></params></methodResponse>';
		// 		doTest( val, function(err,data) {
		// 			console.log( data );
		// 			assert.equal( err );
		// 			assert.equal( data, 10 );
		// 			done();
		// 		});
		// 	});
		// });
	});
});

