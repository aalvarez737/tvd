"use strict";

var assert = require('assert');
var bPromise = require('bluebird');
var dbus_native = require('dbus-native');

function Service() {
	var self = {};
	var _bus = null;
	var _initCB = null;

	function handleConnection(err) {
		if (err) {
			log.error( 'dbus', 'Unhandled error in connection: err=%s', err.message );
		}

		if (_initCB) {
			var cb = _initCB;
			_initCB = null;
			cb( err );
		}
	}

	//	API
	self.parse = function( a ) {
		if (typeof a !== 'object') {
			return a;
		}
		var result;
		if (typeof a[0] !== 'object') {
			return a;
		}
		var info = a[0][0];
		if (typeof info === 'string') {
			result = {};
			a.forEach( function( child ) {
				result[ child[0] ] = self.parse( child[1] );
			});
			return result;
		}
		if ('bginoqstuxy'.indexOf(info.type) > -1) {
			return a[1][0];
		}
		if (info.type === 'a') {
			var tipo = info.child;
			if( tipo[0].type === 'y' ) {
				var buff = new Buffer(a[1][0].data);
				return buff.toString();
			}
			result = [];
			a[1][0].forEach( function( child ) {
				result.push( self.parse( [ tipo , [ child ] ] ));
			});
			return result;
		} else { // info.type === '{'
			result = {};
			a[1].forEach( function( child ) {
				result[ child[0] ] = self.parse(child[1]);
			});
			return result;
		}
	};

	self.getAll = function( srv, path, iface ) {
		assert(_bus);
		assert(srv);
		assert(path);
		assert(iface);
		return self.invoke( srv, path, 'org.freedesktop.DBus.Properties', 'GetAll', 's', iface );
	};

	self.get = function( srv, path, iface, prop ) {
		assert(_bus);
		assert(srv);
		assert(path);
		assert(iface);
		assert(prop);
		return self.invoke( srv, path, 'org.freedesktop.DBus.Properties', 'Get', 'ss', iface, prop );
	};

	self.invoke = function( srv, path, iface, func, paramFormat ) {
		assert(_bus);
		assert(srv);
		assert(path);
		assert(iface);
		assert(func);
		var msg = {
			path: path,
			destination: srv,
			interface: iface,
			member: func
		};
		if (paramFormat) {
			msg.signature = paramFormat;
			msg.body = [].slice.call(arguments).slice(5);
		}
		log.silly( 'dbus', 'Invoke function: srv=%s, path=%s, iface=%s, func=%s, signature=%s, body=%s',
				   srv, path, iface, func, msg.signature, msg.body );
		return new bPromise(function(resolve, reject) {
			_bus.invoke(msg, function(err,res) {
					if (err) {
						reject(err);
					} else {
						resolve( self.parse(res) );
					}
			});
		});
	};

	self.getInterface = function( srv, path, iface, cb ) {
		assert(_bus);
		assert(srv);
		assert(path);
		assert(iface);
		assert(cb);

		_bus.getService(srv).getInterface(
			path,
			iface,
			function(err, obj) {
				cb( err, obj );
			});
	};

	self.init = function(cb) {
		_initCB = cb;

		//	Setup bus
		_bus = dbus_native.systemBus();
		assert(_bus);

		_bus.connection.on( 'error', handleConnection );
		_bus.connection.once( 'connect', handleConnection );
	};

	self.fin = function(cb) {
		assert( _initCB === null );

		//	Cleanup bus
		_bus.connection.end();
		_bus.connection.removeListener( 'error', handleConnection );
		_bus = null;

		cb();
	};

	return Object.freeze(self);
}

module.exports = Service;

