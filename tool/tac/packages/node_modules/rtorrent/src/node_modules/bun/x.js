#!/usr/bin/env node

var stream = require("stream"),
    util = require("util");

var p1 = new stream.Duplex({objectMode: true, highWaterMark: 2}),
    p2 = new stream.Duplex({objectMode: true, highWaterMark: 2});

p1._write = function _write(input, encoding, done) {
  if (p2.push(input)) {
    console.log("# p1", "_write", true);

    return done();
  } else {
    console.log("# p1", "_write", false);

    this.continue = done;
  }
};

p1._read = function _read(size) {
  console.log("# p1", "_read", p2.continue ? "n" : "y");

  if (p2.continue) {
    var c = p2.continue;
    delete p2.continue;
    c();
  }
};

p1.once("finish", function onFinish() {
  console.log("p1 finished");

  p2.push(null);
});

p1.once("end", function onEnd() {
  console.log("p1 ended");

  p2.end();
});

p2._write = function _write(input, encoding, done) {
  if (p1.push(input)) {
    console.log("# p2", "_write", true);

    return done();
  } else {
    console.log("# p2", "_write", false);

    this.continue = done;
  }
};

p2._read = function _read(size) {
  console.log("# p2", "_read", p1.continue ? "n" : "y");

  if (p1.continue) {
    var c = p1.continue;
    delete p1.continue;
    c();
  }
};

p2.once("finish", function onFinish() {
  console.log("p2 finished");

  p1.push(null);
});

p2.once("end", function onEnd() {
  console.log("p2 ended");

  p1.end();
});

var S = function S(options) {
  stream.Transform.call(this, options);
};
util.inherits(S, stream.Transform);

S.prototype._transform = function _transform(input, encoding, done) {
  setImmediate(function pushThrough() {
    this.push(input);
    done();
  }.bind(this));
};

var s1 = new S({objectMode: true, highWaterMark: 2}),
    s2 = new S({objectMode: true, highWaterMark: 3});

p2.pipe(s1).pipe(s2).pipe(p2);

var e1 = new stream.PassThrough({objectMode: true}),
    e2 = new stream.PassThrough({objectMode: true});

var n = new stream.Writable({objectMode: true});
n._write = function _write(input, encoding, done) {
  process.stdout.write(JSON.stringify(input) + "\n");

  done();
};

n.on("finish", function onFinish() {
  console.log("n finished");
});

e1.pipe(p1).pipe(e2).pipe(n);

e1.on("finish", function onFinish() {
  console.log("e1 finished");
});

e1.on("end", function onEnd() {
  console.log("e1 ended");
});

e2.on("finish", function onFinish() {
  console.log("e2 finished");
});

e2.on("end", function onEnd() {
  console.log("e2 ended");
});

for (var i=0;i<10;++i) {
  e1.write({hello: i});
}

function ticks(n, cb) {
  if (!n) {
    return cb();
  } else {
    setImmediate(function() {
      ticks(n - 1, cb);
    });
  }
};
ticks(6, s2.end.bind(p2));

//e1.end();
