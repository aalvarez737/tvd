'use strict';

var assert = require('assert');
var tvdutil = require('tvdutil');
var bPromise = require('bluebird');
var request = require('request');
var FeedParser = require('feedme');

function processFeed( opts ) {
	assert(opts.url, 'processFeed: No URL');
	log.silly( 'feed', 'Process feed: feedURL=%s, lastPubDate=%s', opts.url, opts.lastPubDate );

	return new bPromise(function(resolve,reject) {
		let needAdd=true;
		let result = {
			items: []
		};

		var parser = new FeedParser();
		parser.on('end', () => resolve(result) );
		parser.on('error', reject );

		parser.on('item', function(item) {
			log.silly( 'feed', 'Add item: needAdd=%s, item=%j', needAdd, item );
			if (needAdd) {
				let itemPub = Date.parse(item.pubdate);
				if (isNaN(itemPub) || !opts.lastPubDate || itemPub > opts.lastPubDate) {
					result.items.push(item);
				}
			}
		});
		parser.on('pubdate', function(pub) {
			log.silly( 'feed', 'On pubdate: pub=%s', pub );
			result.lastPubDate = Date.parse(pub);
			if (opts.lastPubDate !== result.lastPubDate) {
				needAdd = true;
			}
			else {
				needAdd = false;
			}
		});

		request
			.get( opts.url )
			.on('response', function(response) {
				if (response.statusCode !== 200) {
					reject( tvdutil.warnErr( 'feed', 'Cannot download file; invalid status code: st=%d', response.statusCode) );
				}
			})
			.on('error', reject )
			.pipe(parser);
	});
}

module.exports = processFeed;

