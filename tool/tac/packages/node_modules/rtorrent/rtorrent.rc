# This is an example resource file for rTorrent. Copy to
# ~/.rtorrent.rc and enable/modify the options as needed. Remember to
# uncomment the options you wish to enable.

# Maximum and minimum number of peers to connect to per torrent.
min_peers = 40
max_peers = 100

# Same as above but for seeding completed torrents (-1 = same as downloading)
min_peers_seed = 5
max_peers_seed = 10

# Maximum number of simultanious uploads per torrent.
max_uploads = 2

# Global upload and download rate in KiB. "0" for unlimited.
download_rate = 0
upload_rate = 6

# Colors
#done_fg_color = 1

# SCGI
scgi_port = 127.0.0.1:5001
xmlrpc_dialect=i8

# Default directory to save the downloaded torrents.
directory = /home/tac/.rtorrent/save/

# Default session directory. Make sure you don't run multiple instance
# of rtorrent using the same session directory. Perhaps using a
# relative path?
session = /home/tac/.rtorrent/session

# Watch a directory for new torrents, and stop those that have been
# deleted.
schedule = watch_directory,10,10,"load_start=/home/tac/share/torrents/*.torrent,d.set_custom1=/home/tac/share/downloads"
schedule = tied_directory,10,10,start_tied=
schedule = untied_directory,10,10,close_untied=

# Create symlinks in the watch directory with a suffix indicating the
# download state.
#on_start    = link1,"d.create_link=tied,,.started"
#on_stop     = link1,"d.delete_link=tied,,.started"
#on_finished = link1,"d.create_link=tied,,.finished"
#on_erase    = link1,"d.delete_link=tied,,.finished"

# When the torrent finishes, it executes "mv -n <base_path> ~/Download/"
# and then sets the destination directory to "~/Download/".
system.method.set_key = event.download.finished,move_complete,"d.set_directory=$d.get_custom1=;execute=mv,-f,$d.get_base_path=,$d.get_custom1="

# Schedule download rate
schedule = throttle_1,20:00:00,24:00:00,download_rate=0
schedule = throttle_2,20:00:00,24:00:00,upload_rate=8
schedule = throttle_3,09:00:00,24:00:00,download_rate=10
schedule = throttle_4,09:00:00,24:00:00,upload_rate=2

# Close torrents when diskspace is low.
schedule = low_diskspace,5,60,close_low_diskspace=100M

# Stop torrents when reaching upload ratio in percent,
# when also reaching total upload in bytes, or when
# reaching final upload ratio in percent.
#schedule = ratio,60,60,stop_on_ratio=10,50M,200

# The ip address reported to the tracker.
#ip = 127.0.0.1
#ip = rakshasa.no

# The ip address the listening socket and outgoing connections is
# bound to.
#bind = 127.0.0.1
#bind = rakshasa.no

# Port range to use for listening.
port_range = 6890-6999

# Start opening ports at a random position within the port range.
port_random = no

# Check hash for finished torrents. Might be usefull until the bug is
# fixed that causes lack of diskspace not to be properly reported.
check_hash = yes

# Set whetever the client should try to connect to UDP trackers.
use_udp_trackers = yes

# Alternative calls to bind and ip that should handle dynamic ip's.
#schedule = ip_tick,0,1800,ip=rakshasa
#schedule = bind_tick,0,1800,bind=rakshasa

# Encryption options, set to none (default) or any combination of the following:
# allow_incoming, try_outgoing, require, require_RC4, enable_retry, prefer_plaintext
#
# The example value allows incoming encrypted connections, starts unencrypted
# outgoing connections but retries with encryption if they fail, preferring
# plaintext to RC4 encryption after the encrypted handshake
#
encryption = allow_incoming,enable_retry,prefer_plaintext

#
# Do not modify the following parameters unless you know what you're doing.
#

# Max number of files to keep open simultaniously.
#max_open_files = 128

# Number of sockets to simultaneously keep open.
#max_open_sockets = <no default>


# Example of scheduling commands: Switch between two ip's every 5
# seconds.
#schedule = "ip_tick1,5,10,ip=torretta"
#schedule = "ip_tick2,10,10,ip=lampedusa"

# Remove a scheduled event.
#schedule_remove = "ip_tick1"
