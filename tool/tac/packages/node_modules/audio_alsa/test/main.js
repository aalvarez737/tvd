'use strict';

var assert = require('assert');
var util = require('util');
var childp = require('child_process');
var Mocks = require('mocks');

var Alsa = require('../src/main');

describe('Alsa', function() {
	var reg;

	beforeEach(function() {
		reg = Mocks.init('silly');
	});

	afterEach(function() {
		Mocks.fin();
	});

	describe('Constructor', function() {
		it('should construct a audio Alsa implementation', function() {
			var alsa = new Alsa();
			assert( alsa );
			assert( alsa.setVolume );
			assert( alsa.mute );
		});

		it('should construct a audio Alsa implementation with the ctrl to use', function() {
			var alsa = new Alsa('Master');
			assert( alsa );
			assert( alsa.setVolume );
			assert( alsa.mute );
		});
	});

	describe('methods for alsa', function() {
		var alsa = null;

		beforeEach(function() {
			alsa = new Alsa();
		});

		afterEach(function() {
			alsa = null;
		});

		it('should return name correctly', function() {
			assert.equal( alsa.name(), 'Alsa' )
		});

		it('should set/get master volume to 100%', function (done) {
			alsa.setVolume( 100, function(err) {
				assert(!err);
				done();
			});
		});

		it('should set master volume and get error', function (done) {
			var old = childp.spawn;
			var curSpawn = null;
			childp.spawn = function( cmd, args ) {
				var self = {};
				self.signals = {};
				self.on = function(sig,cb) {
					self.signals[sig] = cb;
				};
				self.removeListener = function(sig,cb) {
					delete self.signals[sig];
				};
				curSpawn = self;
				return self;
			};

			alsa.setVolume( 100, function(err) {
				assert(err);
				assert.equal( err.message, 'pepe' );
				childp.spawn = old;
				done();
			});

			assert(curSpawn);
			curSpawn.signals['error']( new Error( 'pepe' ) );
		});

		it('should check exit code', function (done) {
			var old = childp.spawn;
			var curSpawn = null;
			childp.spawn = function( cmd, args ) {
				var self = {};
				self.signals = {};
				self.on = function(sig,cb) {
					self.signals[sig] = cb;
				};
				self.removeListener = function(sig,cb) {
					delete self.signals[sig];
				};
				curSpawn = self;
				return self;
			};

			alsa.setVolume( 100, function(err) {
				assert(err);
				assert.equal( err.message, 'Unknown error' );
				childp.spawn = old;
				done();
			});

			assert(curSpawn);
			curSpawn.signals['close']( 1 );
		});

		it('should mute/unmute master', function (done) {
			alsa.mute( true, function (err) {
				assert( !err );
				alsa.mute( false, function (err) {
					assert( !err );
					done();
				});
			});
		});
	});
});
