{
  "_args": [
    [
      "scgi-stream",
      "/home/rako/work/middleware/tool/tac/packages"
    ]
  ],
  "_from": "scgi-stream@*",
  "_id": "scgi-stream@0.3.1",
  "_inCache": true,
  "_installable": true,
  "_location": "/scgi-stream",
  "_npmUser": {
    "email": "deoxxa@fknsrs.biz",
    "name": "deoxxa"
  },
  "_npmVersion": "1.3.8",
  "_phantomChildren": {},
  "_requested": {
    "name": "scgi-stream",
    "raw": "scgi-stream",
    "rawSpec": "",
    "scope": null,
    "spec": "*",
    "type": "range"
  },
  "_requiredBy": [
    "#USER"
  ],
  "_resolved": "https://registry.npmjs.org/scgi-stream/-/scgi-stream-0.3.1.tgz",
  "_shasum": "cc67282ade49d2c5fbde84337fe0658c669a5edd",
  "_shrinkwrap": null,
  "_spec": "scgi-stream",
  "_where": "/home/rako/work/middleware/tool/tac/packages",
  "author": {
    "email": "deoxxa@fknsrs.biz",
    "name": "Conrad Pankoff",
    "url": "http://www.fknsrs.biz/"
  },
  "bugs": {
    "url": "https://github.com/deoxxa/scgi-stream/issues"
  },
  "dependencies": {
    "bun": "0.0.5"
  },
  "description": "Simple SCGI client",
  "devDependencies": {},
  "directories": {},
  "dist": {
    "shasum": "cc67282ade49d2c5fbde84337fe0658c669a5edd",
    "tarball": "http://registry.npmjs.org/scgi-stream/-/scgi-stream-0.3.1.tgz"
  },
  "homepage": "https://github.com/deoxxa/scgi-stream#readme",
  "keywords": [
    "request",
    "scgi",
    "simple",
    "stream"
  ],
  "license": "BSD",
  "main": "scgi.js",
  "maintainers": [
    {
      "name": "deoxxa",
      "email": "deoxxa@fknsrs.biz"
    }
  ],
  "name": "scgi-stream",
  "optionalDependencies": {},
  "readme": "scgi-stream\n===========\n\nSimple SCGI client.\n\nOverview\n--------\n\nscgi-stream lets you talk to scgi-speaking services without having to go through\nan intermediate HTTP server.\n\nInstallation\n------------\n\nAvailable via [npm](http://npmjs.org/):\n\n> $ npm install scgi-stream\n\nOr via git:\n\n> $ git clone git://github.com/deoxxa/scgi-stream.git node_modules/scgi-stream\n\nAPI\n---\n\n**request**\n\nMakes an SCGI request. Returns an `SCGIRequest` object. Also does some wiring\nfor you so that the request returned will emit a `response` event when the\nresponse begins to arrive. See the example section below for more information on\nhow this works.\n\n```javascript\nscgi.request(options);\n```\n\n```javascript\nvar scgi = require(\"scgi-stream\");\n\nscgi.request(options);\n```\n\nArguments\n\n* _options_ - an object specifying options for the request and response.\n  Available options are `stream`, `host`, `port`, `path`, `method`, and\n  `headers`. `stream` is optionally a stream object. If `stream` is not\n  specified, `host` and `port`, which are a string and a number respectively,\n  will be used to construct a TCP socket. `path` and `method` are strings, and\n  `headers` is an object with a predictable structure.\n\n**duplex**\n\nMakes an SCGI request. Returns a duplex stream that combines both the request\nand response parts of the operation. The stream returned will emit the `headers`\nevent like a regular `SCGIResponse` object, but will not emit a `response` event.\n\n```javascript\nscgi.duplex(options);\n```\n\n```javascript\nvar scgi = require(\"scgi-stream\");\n\nprocess.stdin.pipe(scgi.duplex(options)).pipe(process.stdout);\n```\n\nArguments\n\n* _options_ - same as the options for **request**\n\n**SCGIRequest**\n\nA duplex stream representing a request.\n\n```javascript\nnew SCGIRequest(options);\n```\n\n```javascript\nvar req = new scgi.SCGIRequest({\n  path: \"/\",\n  headers: {\n    \"content-type\": \"text/plain\",\n  },\n});\n\nreq.pipe(process.stdout);\n\nreq.end(\"hi there\");\n```\n\nArguments\n\n* _options_ - an object specifying options for the request. Available options\n  are `path`, `method`, and `headers`.\n\n**SCGIResponse**\n\nA duplex stream that parses and represents a response. Emits a `headers` event\nwhen the headers for the stream have been parsed, then passes through all\nfollowing data.\n\n```javascript\nnew SCGIResponse(options);\n```\n\n```javascript\nvar res = new scgi.SCGIResponse();\n\nsocket.pipe(res).pipe(process.stdout);\n\nres.on(\"headers\", function(headers) {\n  console.log(headers);\n});\n```\n\nArguments\n\n* _options_ - an object with the typical `stream.Transform` options such as\n  `highWaterMark`, `objectMode`, etc.\n\nExample\n-------\n\nAlso see [example.js](https://github.com/deoxxa/scgi-stream/blob/master/example.js).\n\n```javascript\nvar scgi = require(\"scgi-stream\");\n\nvar req = scgi.request({\n  host: \"127.0.0.1\",\n  port: 17199,\n  path: \"/\",\n});\n\nreq.on(\"response\", function(res) {\n  res.on(\"headers\", function(headers) {\n    console.log(headers);\n  });\n\n  res.pipe(process.stdout);\n});\n\nreq.end(\"<methodCall><methodName>download_list</methodName></methodCall>\");\n```\n\nLicense\n-------\n\n3-clause BSD. A copy is included with the source.\n\nContact\n-------\n\n* GitHub ([deoxxa](http://github.com/deoxxa))\n* Twitter ([@deoxxa](http://twitter.com/deoxxa))\n* ADN ([@deoxxa](https://alpha.app.net/deoxxa))\n* Email ([deoxxa@fknsrs.biz](mailto:deoxxa@fknsrs.biz))\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/deoxxa/scgi-stream.git"
  },
  "version": "0.3.1"
}
