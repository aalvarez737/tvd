'use strict';

var assert = require('assert');
var util = require('util');
var bPromise = require('bluebird');
var fs = bPromise.promisifyAll( require('fs') );
var tvdutil = require('tvdutil');
var Mocks = require('mocks');

var setupIoctl = null;

function ioctlMock( fd, req, data, cb ) {
	if (setupIoctl) {
		setupIoctl( fd, req, data, cb );
	}
	else {
		if (!cb) {
			cb = data;
		}
		cb( undefined, 0 );
	}
}

describe('devinput', function() {
	beforeEach(function() {
		setupIoctl = null;
	});

	describe('Constructor', function() {
		it('should construct a devinput implementation', function() {
			var input = Mocks.mockRequire( require, '../src/main', { './ioctl': ioctlMock } )();
			assert( input );
			assert( input.name );
			assert( input.start );
			assert( input.stop );
			assert( input.sendKey );
			assert( input.sendMouseMove );
		});
	});

	describe('methods', function() {
		var input = null;

		function createInput(aKeys) {
			input = Mocks.mockRequire( require, '../src/main', { './ioctl': ioctlMock } )();
		}

		beforeEach(function() {
			tvdutil.setupLog( 'silly' );
		});

		afterEach(function() {
			input = null;
		});

		describe('basic', function() {
			beforeEach(function() {
				createInput();
			});

			it('should return name correctly', function() {
				assert.equal( input.name(), 'devinput (linux)' )
			});

			it('should start/stop', function (done) {
				assert( input.start(function()  {
					input.stop(done);
				}));
			});

			xit('should start/stop on 32bits', function (done) {
				process.arch = '32';
				assert( input.start(function()  {
					input.stop(done);
				}));
			});

			it('should call callback if not handle', function (done) {
				input.start();
				input.stop(done);
			});

			it('should start/stop/start/stop', function (done) {
				assert( input.start(function() {
					input.stop(function() {
						assert( input.start(function() {
							input.stop(done);
						}) );
					});
				}));
			});

			it('should not send key if not started', function (done) {
				input.sendKey( 48, true, function(err) {
					assert( err !== undefined );
					done();
				});
			});

			it('should not send mouse move if not started', function (done) {
				input.sendMouseMove( 1, 1, function(err) {
					assert( err !== undefined );
					done();
				});
			});
		});

		describe('setupUInput', function() {
			beforeEach(function() {
				createInput();
			});

			it('fail module not found', function(done) {
				var oldMethod = fs.open;
				fs.open = function(n,mode,cb) {
					cb( new Error('alguno' ) );
				};
				input.start(function(result) {
					assert(result === false);
					input.stop(function() {
						fs.open = oldMethod;
						done();
					});
				});
			});

			it('fail module not found without cb', function(done) {
				var oldMethod = fs.open;
				fs.open = function(n,mode,cb) {
					cb( new Error('alguno' ) );
					input.stop(function() {
						fs.open = oldMethod;
						done();
					});
				};
				input.start();
			});

			it('fail in ioctl before create', function(done) {
				setupIoctl = function ioctlMock( fd, req, data, cb ) {
					if (!cb) {
						cb = data;
					}
					cb( new Error( 'alguno' ) );
				}
				input.start(function(result) {
					assert(result === false);
					input.stop(function() {
						done();
					});
				});
			});
		});

		describe('api', function() {
			var failing_write = function(fd, buffer, offset, length, position, callback) {
				assert(fd);
				assert(buffer);
				assert.equal(length,24);
				assert.equal(offset,0);
				assert.equal(position,null);
				assert(callback);
				callback( new Error('pepe') );
			};
			var working_write = function(fd, buffer, offset, length, position, callback) {
				assert(fd);
				assert(buffer);
				assert.equal(length,24);
				assert.equal(offset,0);
				assert.equal(position,null);
				assert(callback);
				callback();
			};

			beforeEach(function(done) {
				createInput();
				assert( input.start(function() {
					done();
				}) );
			});

			afterEach(function(done) {
				input.stop(done);
			});

			it('should handle error in send key', function (done) {
				var oldwrite = fs.write;
				fs.write = failing_write;

				input.sendKey( 48, true, function(err) {
					assert( err );
					assert.equal( err.message, 'pepe' );
					fs.write = oldwrite;
					done();
				});
			});

			it('should handle error in send mouse move', function (done) {
				var oldwrite = fs.write;
				fs.write = failing_write;

				input.sendMouseMove( 1, 1, function() {
					fs.write = oldwrite;
					done();
				});
			});

			it('should send key', function (done) {
				var oldwrite = fs.write;
				fs.write = working_write;

				input.sendKey( 48, true, function() {
					input.sendKey( 48, false, function() {
						fs.write = oldwrite;
						done();
					});
				});
			});

			it('should send mouse move', function (done) {
				var oldwrite = fs.write;
				fs.write = working_write;

				input.sendMouseMove( 1, 1, function() {
					input.sendMouseMove( 1, 1, function() {
						fs.write = oldwrite;
						done();
					});
				});
			});
		});
	});
});
