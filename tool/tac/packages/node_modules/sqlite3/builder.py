#!/usr/bin/env python3

import imp
import os

module = imp.load_source('mod_builder', os.path.join(os.path.dirname(os.path.abspath(__file__)), '..', '..', '..', 'build', 'module_builder.py'))
DIRNAME=os.path.join(os.path.dirname(__file__))

class Builder( module.Builder ):
#public:
	def __init__(self, name, platform, deployDir, util):
		super().__init__(name, platform, deployDir, util)

	# override
	def clean(self):
		self.util.rm( os.path.join(DIRNAME, 'build') )

	# override
	def build(self):

		# Compile .node file
		self.util.device.exports(False)
		basePath = os.path.dirname(os.path.dirname (self.util.runAndGetOut([ 'node', '-p', "process.execPath"]).rstrip()))
		node_gyp = os.path.join(basePath, 'lib/node_modules/npm/bin/node-gyp-bin/node-gyp')
		args = [ node_gyp, 'configure',  'build' ]
		if self.platform != 'linux':
			os.environ['TOOLCHAIN_BASE'] = self.util.device.getDepotPath('staging')
			args += ['--arch=arm']

		# Copy lib and .node file
		os.environ['NODE_PATH'] = '%s:%s' % (os.environ['NODE_PATH'], os.path.join(DIRNAME,'src/node_modules'))
		os.chdir(DIRNAME)
		self.util.run(args)
		self.util.cpDirContent('lib', DIRNAME, os.path.join( self.deployDir, self.module, 'lib' ))
		srcDir = os.path.join(DIRNAME, 'build/Release')
		dstDir = os.path.join(self.deployDir, self.module, 'build/Release')
		self.util.mkdir(dstDir)
		self.util.cp( 'sqlite3.node', srcDir, dstDir)

		# Remove unnecesary files/dirs
		self.util.rm( os.path.join(self.deployDir, self.module, 'src') )
		self.util.rm( os.path.join(DIRNAME, 'build') )
